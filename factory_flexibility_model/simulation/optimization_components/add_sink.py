#  CALLING PATH:
#  -> Simulation.simulate() -> Simulation.create_optimization_problem()

# IMPORTS
import logging

import gurobipy as gp
from gurobipy import GRB


# CODE START
def add_sink(simulation, component):
    """
    This function adds all necessary MVARS and constraints to the optimization problem that are
    required to simulate the destination handed over as 'Component'
    :param component: components.destination-object
    :return: simulation.m is beeing extended
    """
    # Sinks may be determined in their power intake or the power consumption may be calculated during the optimization.
    # In the first case a constraint is created, that forces all connected inputs to meet the desired power in total
    # In the second case a MVar reflecting the resulting inflow is created, together with a constraint to calculate it

    # create a timeseries of decision variables to represent the total inflow (energy/material) going into the destination
    simulation.MVars[f"E_{component.key}"] = simulation.m.addMVar(
        simulation.T, vtype=GRB.CONTINUOUS, name=f"E_{component.name}"
    )
    logging.debug(
        f"        - Variable:     E_{component.key}                                  (timeseries of global outflows to {component.name}"
    )

    if component.determined:
        # set the sum of incoming flows to meet the power demand
        simulation.m.addConstr(
            gp.quicksum(
                component.inputs[o].weight_destination
                * simulation.MVars[component.inputs[o].key]
                for o in range(len(component.inputs))
            )
            == component.demand
        )
        logging.debug(
            f"        - Constraint:   Sum of incoming flows == determined total demand              (E_{component.name} determined by timeseries)"
        )

    # add constraints to calculate the total outflow from the system as the sum of all weighted energys of incoming connections
    simulation.m.addConstr(
        gp.quicksum(
            simulation.MVars[component.inputs[o].key]
            for o in range(len(component.inputs))
        )
        == simulation.MVars[f"E_{component.key}"]
    )
    logging.debug(f"        - Constraint:   E_{component.key} == sum of incoming flows")

    # is the total cumulative input of the destination limited? If yes: add sum constraint
    if component.max_total_input_limited:
        simulation.m.addConstr(
            gp.quicksum(simulation.MVars[f"E_{component.key}"])
            <= component.max_total_input
        )
        logging.debug(
            f"        - Constraint:   sum(E_{component.key}(t)) <= E_{component.name}_max_total"
        )

    # is the maximum output power of the destination limited? If yes: Add power_max constraint
    if component.power_max_limited:
        simulation.m.addConstr(
            simulation.MVars[f"E_{component.key}"]
            <= component.power_max * component.availability * simulation.interval_length
        )
        logging.debug(
            f"        - Constraint:   P_{component.key} <= P_{component.name}_max"
        )

    # is the minimum output power of the source limited? If yes: Add power_min constraint
    if component.power_min_limited:
        simulation.m.addConstrs(
            simulation.MVars[f"E_{component.key}"] / simulation.interval_length
            >= component.power_min[t]
            for t in range(simulation.T)
        )
        logging.debug(
            f"        - Constraint:   P_{component.key} >= P_{component.key}_min"
        )

    # does the utilization of the destination cost something? If yes: Add the corresponding cost factors
    if component.chargeable:
        simulation.C_objective.append(
            simulation.m.addMVar(1, vtype=GRB.CONTINUOUS, name=f"C_{component.key}")
        )
        simulation.m.addConstr(
            simulation.C_objective[-1]
            == component.cost[0 : simulation.T] @ simulation.MVars[f"E_{component.key}"]
        )
        logging.debug(f"        - CostFactor:   Cost for dumping into {component.name}")

    # does the utilization of the destination create revenue? If yes: Add the corresponding negative cost factors
    if component.refundable:
        simulation.R_objective.append(
            simulation.m.addMVar(1, vtype=GRB.CONTINUOUS, name=f"R_{component.key}")
        )
        simulation.m.addConstr(
            simulation.R_objective[-1]
            == component.revenue[0 : simulation.T]
            @ simulation.MVars[f"E_{component.key}"]
        )
        logging.debug(
            f"        - CostFactor:   Revenue for sales generated by {component.name}"
        )

    if component.causes_emissions:
        # additional emissions
        simulation.emission_sources.append(
            simulation.m.addMVar(1, vtype=GRB.CONTINUOUS, name=f"CO2_{component.key}")
        )
        simulation.m.addConstr(
            simulation.emission_sources[-1]
            == component.co2_emissions_per_unit[0 : simulation.T]
            @ simulation.MVars[f"E_{component.key}"]
        )
        logging.debug(
            f"        - EmissionFactor:   Emissions caused by usage of {component.name}"
        )
